{"version":3,"sources":["actions/actionTypes.js","actions/index.js","components/Header.jsx","components/LoginForm.jsx","components/ExpenseForm.jsx","pages/Login.js","components/ExpensesTable.jsx","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["SAVE_USER_EMAIL","REQUEST_CURRENCIES_INITIALS","RECEIVE_CURRENCIES_INITIALS","SAVE_EXPENSE","RECEIVE_EXCHANGE_RATES","UPDATE_TOTAL_EXPENSES","DELETE_EXPENSE","actReceiveCurrenciesInitials","currencies","type","payload","actReceiveExchangeRates","exchangeRates","actUpdateTotalExpenses","Header","state","currency","this","props","email","total","updateTotalExpenses","Component","defaultProps","connect","user","wallet","totalExpenses","dispatch","LoginForm","password","isLoginButtonDisabled","validadeInput","emailValidated","test","passwordValidated","validated","setState","handleInputChange","target","name","value","handleLogin","event","preventDefault","history","saveUserEmail","push","onSubmit","onChange","disabled","actSaveUserEmail","ExpenseForm","initialExpense","description","method","tag","expense","availableMethods","availableTags","handleSubmitExpense","e","savedExpenses","saveExpense","fetchRates","id","length","step","htmlFor","map","coin","key","payment","index","category","onClick","expenses","actSaveExpense","fetch","response","json","Login","ExpensesTable","handleDeleteButton","deleteExpense","scope","valueToFixed","toFixed","unabbreviatedCurrency","split","exchange","ask","convertedValue","actDeleteExpense","Wallet","fetchCurrenciesInit","React","rawCurrencies","Object","keys","filter","currCode","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","currentExchangeRate","find","expObj","reduce","acc","curr","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.024ceee0.chunk.js","sourcesContent":["export const SAVE_USER_EMAIL = 'SAVE_USER_EMAIL';\nexport const REQUEST_CURRENCIES_INITIALS = 'REQUEST_CURRENCIES_INITIALS';\nexport const RECEIVE_CURRENCIES_INITIALS = 'RECEIVE_CURRENCIES_INITIALS';\nexport const SAVE_EXPENSE = 'SAVE_EXPENSE';\nexport const REQUEST_EXCHANGE_RATES = 'REQUEST_EXCHANGE_RATES';\nexport const RECEIVE_EXCHANGE_RATES = 'RECEIVE_EXCHANGE_RATES';\nexport const UPDATE_TOTAL_EXPENSES = 'UPDATE_TOTAL_EXPENSES';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\n","import {\n  SAVE_USER_EMAIL,\n  REQUEST_CURRENCIES_INITIALS,\n  RECEIVE_CURRENCIES_INITIALS,\n  SAVE_EXPENSE,\n  REQUEST_EXCHANGE_RATES,\n  RECEIVE_EXCHANGE_RATES,\n  UPDATE_TOTAL_EXPENSES,\n  DELETE_EXPENSE,\n} from './actionTypes';\n\nexport const actSaveUserEmail = (email) => ({\n  type: SAVE_USER_EMAIL,\n  payload: {\n    email,\n  },\n});\n\nconst actRequestCurrenciesInitials = () => ({\n  type: REQUEST_CURRENCIES_INITIALS,\n});\n\nconst actReceiveCurrenciesInitials = (currencies) => ({\n  type: RECEIVE_CURRENCIES_INITIALS,\n  payload: {\n    currencies,\n  },\n});\n\nexport const fetchCurrenciesInitials = () => async (dispatch) => {\n  dispatch(actRequestCurrenciesInitials());\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const rawCurrencies = await response.json();\n  const currencies = Object.keys(rawCurrencies)\n    .filter((currCode) => currCode !== 'USDT');\n  return dispatch(actReceiveCurrenciesInitials(currencies));\n};\n\nexport const actSaveExpense = (expense) => ({\n  type: SAVE_EXPENSE,\n  payload: {\n    expense,\n  },\n});\n\nconst actRequestExchangeRates = () => ({\n  type: REQUEST_EXCHANGE_RATES,\n});\n\nconst actReceiveExchangeRates = (exchangeRates) => ({\n  type: RECEIVE_EXCHANGE_RATES,\n  payload: {\n    exchangeRates,\n  },\n});\n\nexport const actUpdateTotalExpenses = () => ({\n  type: UPDATE_TOTAL_EXPENSES,\n});\n\nexport const fetchExchangeRates = () => async (dispatch) => {\n  dispatch(actRequestExchangeRates());\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const exchangeRates = await response.json();\n  dispatch(actReceiveExchangeRates(exchangeRates));\n  return dispatch(actUpdateTotalExpenses());\n};\n\nexport const actDeleteExpense = (id) => ({\n  type: DELETE_EXPENSE,\n  payload: {\n    id,\n  },\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { actUpdateTotalExpenses } from '../actions';\n\nclass Header extends Component {\n  state = {\n    currency: 'BRL',\n  };\n\n  render() {\n    const {\n      props: { email, total, updateTotalExpenses },\n      state: { currency },\n    } = this;\n    updateTotalExpenses();\n    return (\n      <header>\n        <h4 data-testid=\"email-field\">{ email }</h4>\n        <h4 data-testid=\"total-field\">\n          { total }\n        </h4>\n        <span data-testid=\"header-currency-field\">\n          { currency }\n        </span>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  total: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  updateTotalExpenses: PropTypes.func.isRequired,\n};\n\nHeader.defaultProps = {\n  total: 0,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  total: state.wallet.totalExpenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateTotalExpenses: () => dispatch(actUpdateTotalExpenses()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { actSaveUserEmail } from '../actions';\n\nclass LoginForm extends Component {\n  state = {\n    email: '',\n    password: '',\n    isLoginButtonDisabled: true,\n  };\n\n  validadeInput = () => {\n    const { email, password } = this.state;\n    const emailValidated = /[\\d|\\w|\\\\.]+@[\\w]+\\.[\\w]+/i.test(email);\n    const passwordValidated = /[\\d|\\w]{6,}/i.test(password);\n    const validated = !emailValidated || !passwordValidated;\n    this.setState({ isLoginButtonDisabled: validated });\n  }\n\n  handleInputChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value }, () => this.validadeInput());\n  }\n\n  handleLogin = (event) => {\n    event.preventDefault();\n    const {\n      state: { email },\n      props: { history, saveUserEmail },\n    } = this;\n    saveUserEmail(email);\n    history.push('/carteira');\n  }\n\n  render() {\n    const {\n      state: {\n        email,\n        password,\n        isLoginButtonDisabled,\n      },\n      handleInputChange,\n      handleLogin,\n    } = this;\n    return (\n      <form\n        onSubmit={ handleLogin }\n      >\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={ email }\n          onChange={ handleInputChange }\n          data-testid=\"email-input\"\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={ password }\n          onChange={ handleInputChange }\n          data-testid=\"password-input\"\n        />\n        <button\n          type=\"submit\"\n          disabled={ isLoginButtonDisabled }\n        >\n          Entrar\n        </button>\n      </form>\n    );\n  }\n}\n\nLoginForm.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  saveUserEmail: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveUserEmail: (email) => dispatch(actSaveUserEmail(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(LoginForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { actSaveExpense, fetchExchangeRates } from '../actions';\n\nclass ExpenseForm extends Component {\n  initialExpense = {\n    value: 0,\n    currency: 'USD',\n    description: '',\n    method: 'Dinheiro',\n    tag: 'Alimentação',\n  };\n\n  state = {\n    expense: this.initialExpense,\n    availableMethods: [\n      'Dinheiro',\n      'Cartão de crédito',\n      'Cartão de débito',\n    ],\n    availableTags: [\n      'Alimentação',\n      'Lazer',\n      'Trabalho',\n      'Transporte',\n      'Saúde',\n    ],\n  };\n\n  /*\n  selecionaría sempre a primeira opção do select\n  caso currency não fosse assícrono...\n  componentDidMount() {\n    const {\n      state: {\n        expense,\n        availableMethods,\n        availableTags,\n      },\n      props: {\n        currencies,\n      },\n    } = this;\n    this.setState({ expense: {\n      ...expense,\n      currency: currencies[0],\n      method: availableMethods[0],\n      tag: availableTags[0],\n    } });\n  }\n  */\n\n  handleInputChange = ({ target }) => {\n    const { name, value } = target;\n    const { expense } = this.state;\n    this.setState({ expense: {\n      ...expense,\n      [name]: value,\n    } });\n  }\n\n  handleSubmitExpense = (e) => {\n    e.preventDefault();\n    const {\n      state: { expense },\n      props: {\n        savedExpenses,\n        saveExpense,\n        fetchRates,\n      },\n      initialExpense,\n    } = this;\n    saveExpense({\n      ...expense,\n      id: savedExpenses.length,\n    });\n    fetchRates();\n    this.setState({ expense: initialExpense });\n  }\n\n  render() {\n    const {\n      state: {\n        expense: {\n          value,\n          description,\n          currency,\n          method,\n          tag,\n        },\n        availableMethods,\n        availableTags,\n      },\n      props: {\n        currencies,\n      },\n      handleInputChange,\n      handleSubmitExpense,\n    } = this;\n    return (\n      <form\n        onSubmit={ (e) => e.preventDefault() }\n      >\n        <input\n          type=\"number\"\n          step=\"10\"\n          name=\"value\"\n          value={ value }\n          onChange={ handleInputChange }\n          data-testid=\"value-input\"\n        />\n        <label htmlFor=\"currency\">\n          Moeda:\n          <select\n            id=\"currency\"\n            name=\"currency\"\n            value={ currency }\n            onChange={ handleInputChange }\n          >\n            { currencies.map((coin) => (\n              <option\n                key={ coin }\n                value={ coin }\n              >\n                { coin }\n              </option>\n            )) }\n          </select>\n        </label>\n        <select\n          name=\"method\"\n          value={ method }\n          onChange={ handleInputChange }\n          data-testid=\"method-input\"\n        >\n          { availableMethods.map((payment, index) => (\n            <option\n              key={ index }\n              value={ payment }\n            >\n              { payment }\n            </option>\n          ))}\n        </select>\n        <select\n          name=\"tag\"\n          value={ tag }\n          onChange={ handleInputChange }\n          data-testid=\"tag-input\"\n        >\n          { availableTags.map((category, index) => (\n            <option\n              key={ index }\n              value={ category }\n            >\n              { category }\n            </option>\n          ))}\n        </select>\n        <input\n          type=\"text\"\n          name=\"description\"\n          value={ description }\n          onChange={ handleInputChange }\n          data-testid=\"description-input\"\n        />\n        <button\n          type=\"submit\"\n          onClick={ handleSubmitExpense }\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nExpenseForm.propTypes = {\n  currencies: PropTypes.arrayOf(\n    PropTypes.string,\n  ).isRequired,\n  savedExpenses: PropTypes.arrayOf(\n    PropTypes.shape({}),\n  ).isRequired,\n  saveExpense: PropTypes.func.isRequired,\n  fetchRates: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  savedExpenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveExpense: (expense) => dispatch(actSaveExpense(expense)),\n  fetchRates: () => dispatch(fetchExchangeRates()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { LoginForm } from '../components';\n\nclass Login extends Component {\n  render() {\n    const { history } = this.props;\n    return (\n      <div>\n        <h2>Login</h2>\n        <LoginForm history={ history } />\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default Login;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { actDeleteExpense, actUpdateTotalExpenses } from '../actions';\n\nclass ExpensesTable extends Component {\n  handleDeleteButton = (id) => {\n    const { deleteExpense, updateTotalExpenses } = this.props;\n    deleteExpense(id);\n    updateTotalExpenses();\n  }\n\n  render() {\n    const {\n      props: { expenses },\n      handleDeleteButton,\n    } = this;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th scope=\"col\">Valor</th>\n            <th scope=\"col\">Moeda</th>\n            <th scope=\"col\">Câmbio utilizado</th>\n            <th scope=\"col\">Moeda de conversão</th>\n            <th scope=\"col\">Valor convertido</th>\n            <th scope=\"col\">Tag</th>\n            <th scope=\"col\">Descrição</th>\n            <th scope=\"col\">Método de pagamento</th>\n            <th scope=\"col\">Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            expenses.map(({\n              value,\n              id,\n              currency,\n              exchangeRates,\n              tag,\n              description,\n              method,\n            }) => {\n              const valueToFixed = (+value).toFixed(2);\n              const unabbreviatedCurrency = exchangeRates\n                ? exchangeRates[currency].name.split('/Real Brasileiro')[0]\n                : null;\n              const exchange = exchangeRates\n                ? (+exchangeRates[currency].ask).toFixed(2)\n                : null;\n              const convertedValue = exchangeRates\n                ? (value * exchangeRates[currency].ask).toFixed(2)\n                : null;\n              return (\n                <tr key={ id }>\n                  <td>{ valueToFixed }</td>\n                  <td>{ unabbreviatedCurrency }</td>\n                  <td>{ exchange }</td>\n                  <td>Real</td>\n                  <td>{ convertedValue }</td>\n                  <td>{ tag }</td>\n                  <td>{ description }</td>\n                  <td>{ method }</td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      onClick={ () => handleDeleteButton(id) }\n                      data-testid=\"delete-btn\"\n                    >\n                      Excluir\n                    </button>\n                  </td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.arrayOf(\n    PropTypes.shape({}),\n  ).isRequired,\n  deleteExpense: PropTypes.func.isRequired,\n  updateTotalExpenses: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (id) => dispatch(actDeleteExpense(id)),\n  updateTotalExpenses: () => dispatch(actUpdateTotalExpenses()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesTable);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrenciesInitials } from '../actions';\nimport { Header, ExpenseForm } from '../components';\nimport ExpensesTable from '../components/ExpensesTable';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const { fetchCurrenciesInit } = this.props;\n    fetchCurrenciesInit();\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <ExpenseForm />\n        <ExpensesTable />\n      </div>\n    );\n  }\n}\n\nWallet.propTypes = {\n  fetchCurrenciesInit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrenciesInit: () => dispatch(fetchCurrenciesInitials()),\n});\n\nexport default connect(null, mapDispatchToProps)(Wallet);\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Login, Wallet } from './pages';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          component={ Login }\n        />\n        <Route\n          path=\"/carteira\"\n          component={ Wallet }\n        />\n      </Switch>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SAVE_USER_EMAIL } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case SAVE_USER_EMAIL:\n    return {\n      email: payload.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import {\n  REQUEST_CURRENCIES_INITIALS,\n  RECEIVE_CURRENCIES_INITIALS,\n  SAVE_EXPENSE,\n  RECEIVE_EXCHANGE_RATES,\n  UPDATE_TOTAL_EXPENSES,\n  DELETE_EXPENSE,\n} from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  currentExchangeRate: {},\n  totalExpenses: 0,\n};\n\nconst wallet = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case REQUEST_CURRENCIES_INITIALS:\n    return {\n      ...state,\n    };\n  case RECEIVE_CURRENCIES_INITIALS:\n    return {\n      ...state,\n      currencies: payload.currencies,\n    };\n  case SAVE_EXPENSE:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        payload.expense,\n      ],\n    };\n  case RECEIVE_EXCHANGE_RATES:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses\n          .filter((expense) => expense.id !== state.expenses.length - 1),\n        {\n          ...state.expenses\n            .find((expense) => expense.id === state.expenses.length - 1),\n          exchangeRates: payload.exchangeRates,\n        },\n      ],\n    };\n  case UPDATE_TOTAL_EXPENSES: {\n    const total = state.expenses.length > 0 ? state.expenses\n      .map((expObj) => expObj.value * expObj.exchangeRates[expObj.currency].ask)\n      .reduce((acc, curr) => acc + curr)\n      : 0;\n    return {\n      ...state,\n      totalExpenses: total.toFixed(2),\n    };\n  }\n  case DELETE_EXPENSE: {\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense.id !== payload.id),\n    };\n  }\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}